[{"/Users/jeff/GitHub/mirshko/refuge-worldwide/constants.ts":"1","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useArtistRoleFilter.ts":"2","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useFilteredShows.ts":"3","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useGenreFilter.ts":"4","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useGenres.ts":"5","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useIntersect.ts":"6","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/usePlayerState.ts":"7","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useRadioCoStatus.ts":"8","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useScript.ts":"9","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useShows.ts":"10","/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/api.ts":"11","/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/constants.ts":"12","/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/mailchimp.ts":"13","/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/mixcloud.ts":"14","/Users/jeff/GitHub/mirshko/refuge-worldwide/next-env.d.ts":"15","/Users/jeff/GitHub/mirshko/refuge-worldwide/pages/api/exit-preview.ts":"16","/Users/jeff/GitHub/mirshko/refuge-worldwide/pages/api/preview.ts":"17","/Users/jeff/GitHub/mirshko/refuge-worldwide/types/shared.d.ts":"18","/Users/jeff/GitHub/mirshko/refuge-worldwide/util.ts":"19"},{"size":326,"mtime":1609761994304,"results":"20","hashOfConfig":"21"},{"size":201,"mtime":1608213831979,"results":"22","hashOfConfig":"21"},{"size":545,"mtime":1608635132195,"results":"23","hashOfConfig":"21"},{"size":168,"mtime":1607360148331,"results":"24","hashOfConfig":"21"},{"size":652,"mtime":1608031165757,"results":"25","hashOfConfig":"21"},{"size":874,"mtime":1607959531825,"results":"26","hashOfConfig":"21"},{"size":1271,"mtime":1609768524028,"results":"27","hashOfConfig":"21"},{"size":517,"mtime":1609747606248,"results":"28","hashOfConfig":"21"},{"size":2423,"mtime":1608730480029,"results":"29","hashOfConfig":"21"},{"size":676,"mtime":1607961820380,"results":"30","hashOfConfig":"21"},{"size":11681,"mtime":1608634517910,"results":"31","hashOfConfig":"21"},{"size":123,"mtime":1605707555000,"results":"32","hashOfConfig":"21"},{"size":138,"mtime":1607532129217,"results":"33","hashOfConfig":"21"},{"size":216,"mtime":1608737757401,"results":"34","hashOfConfig":"21"},{"size":75,"mtime":1608721049223,"results":"35","hashOfConfig":"21"},{"size":352,"mtime":1605720077000,"results":"36","hashOfConfig":"21"},{"size":758,"mtime":1605720448000,"results":"37","hashOfConfig":"21"},{"size":2422,"mtime":1609769450368,"results":"38","hashOfConfig":"21"},{"size":2248,"mtime":1609769474079,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r7mf89",{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jeff/GitHub/mirshko/refuge-worldwide/constants.ts",[],"/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useArtistRoleFilter.ts",["91","92"],"import { useState } from \"react\";\n\nexport default function useArtistRoleFilter<T = any>(initialFilter: T) {\n  const [filter, filterSet] = useState<T>(initialFilter);\n\n  return { filter, filterSet };\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useFilteredShows.ts",["93","94"],"import useSWR from \"swr\";\nimport { ShowInterface } from \"../types/shared\";\n\nconst getFilteredShows = (_: any, filter: string, data: ShowInterface[]) => {\n  if (filter === \"All\") return data;\n\n  const includesGenreFilter = (show: ShowInterface) =>\n    show.genresCollection.items.filter((genre) => genre.name === filter)\n      .length > 0;\n\n  return data.filter(includesGenreFilter);\n};\n\nexport default function useFilteredShows(\n  data: ShowInterface[],\n  filter: string\n) {\n  return useSWR([\"FilteredShows\", filter, data], getFilteredShows);\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useGenreFilter.ts",["95"],"import { useState } from \"react\";\n\nexport default function useGenreFilter() {\n  const [filter, filterSet] = useState<string>(\"All\");\n\n  return { filter, filterSet };\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useGenres.ts",["96","97"],"import useSWR from \"swr\";\nimport { ShowInterface } from \"../types/shared\";\nimport { sort } from \"../util\";\nimport useShows from \"./useShows\";\n\nasync function getGenres(\n  _: any,\n  allShows: {\n    past: ShowInterface[];\n    upcoming: ShowInterface[];\n  }\n) {\n  const allShowGenres = allShows.past\n    .flatMap((show) => show.genresCollection.items)\n    .map((genre) => genre.name);\n\n  const uniqueGenres = Array.from(new Set(allShowGenres)).sort(sort.alpha);\n\n  return uniqueGenres;\n}\n\nexport default function useGenres(preview = false) {\n  const { data: allShows } = useShows(preview);\n\n  return useSWR([\"AllGenres\", allShows, preview], getGenres);\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useIntersect.ts",["98"],"import { useEffect, useRef, useState } from \"react\";\n\nexport default function useIntersect({\n  root = null,\n  rootMargin,\n  threshold = 0,\n}: {\n  root?: Element;\n  rootMargin?: string;\n  threshold: number | number[];\n}) {\n  const [entry, updateEntry] = useState<IntersectionObserverEntry>(null);\n  const [node, setNode] = useState<Element>(null);\n\n  const observer = useRef<IntersectionObserver>(null);\n\n  useEffect(() => {\n    if (observer.current) observer.current.disconnect();\n\n    observer.current = new window.IntersectionObserver(\n      ([entry]) => updateEntry(entry),\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const { current: currentObserver } = observer;\n\n    if (node) currentObserver.observe(node);\n\n    return () => currentObserver.disconnect();\n  }, [node, root, rootMargin, threshold]);\n\n  return { setNode, entry };\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/usePlayerState.ts",["99"],"import { MutableRefObject, useCallback, useEffect, useState } from \"react\";\nimport { showKey } from \"../lib/mixcloud\";\n\nexport default function usePlayerState(\n  ref: MutableRefObject<HTMLAudioElement>\n) {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    const setStatePlaying = () => setIsPlaying(true);\n    const setStatePaused = () => setIsPlaying(false);\n\n    ref?.current?.addEventListener(\"play\", setStatePlaying);\n    ref?.current?.addEventListener(\"pause\", setStatePaused);\n\n    return () => {\n      ref?.current?.removeEventListener(\"play\", setStatePlaying);\n      ref?.current?.removeEventListener(\"pause\", setStatePaused);\n    };\n  }, [ref]);\n\n  const [, setKey] = showKey.use();\n\n  /**\n   * @note This will unmount the Mixcloud player so we don't have two media sources playing at once.\n   */\n  const removeMixcloudPlayer = () => setKey(null);\n\n  const play = useCallback(async () => {\n    try {\n      removeMixcloudPlayer();\n\n      await ref?.current?.play();\n    } catch (error) {\n      console.error(error);\n    }\n  }, [ref]);\n\n  const pause = useCallback(() => {\n    try {\n      ref?.current?.pause();\n    } catch (error) {\n      console.error(error);\n    }\n  }, [ref]);\n\n  return {\n    isPlaying,\n    play,\n    pause,\n  };\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useRadioCoStatus.ts",["100","101"],"import useSWR from \"swr\";\nimport { RadioCoInterface } from \"../types/shared\";\n\nconst getRadioCoStatus = async (_: any, stationId: string) => {\n  const URL = `https://public.radio.co/stations/${stationId}/status`;\n\n  const res = await fetch(URL);\n\n  return res.json();\n};\n\nexport default function useRadioCoStatus(stationId: string) {\n  return useSWR<RadioCoInterface>([\"RadioCo\", stationId], getRadioCoStatus, {\n    /**\n     * @note Refresh the radio data every 30s\n     */\n    // refreshInterval: 30 * 1000,\n  });\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useScript.ts",["102","103"],"import { useEffect, useState } from \"react\";\n\nexport default function useScript(src: string) {\n  // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n  const [status, setStatus] = useState<\"idle\" | \"loading\" | \"ready\" | \"error\">(\n    src ? \"loading\" : \"idle\"\n  );\n\n  useEffect(\n    () => {\n      // Allow falsy src value if waiting on other data needed for\n      // constructing the script URL passed to this hook.\n      if (!src) {\n        setStatus(\"idle\");\n        return;\n      }\n\n      // Fetch existing script element by src\n      // It may have been added by another instance of this hook\n      let script: HTMLScriptElement = document.querySelector(\n        `script[src=\"${src}\"]`\n      );\n\n      if (!script) {\n        // Create script\n        script = document.createElement(\"script\");\n        script.src = src;\n        script.async = true;\n        script.defer = true;\n        script.setAttribute(\"data-status\", \"loading\");\n        // Add script to document body\n        document.body.appendChild(script);\n\n        // Store status in attribute on script\n        // This can be read by other instances of this hook\n        const setAttributeFromEvent = (event) => {\n          script.setAttribute(\n            \"data-status\",\n            event.type === \"load\" ? \"ready\" : \"error\"\n          );\n        };\n\n        script.addEventListener(\"load\", setAttributeFromEvent);\n        script.addEventListener(\"error\", setAttributeFromEvent);\n      } else {\n        // Grab existing script status from attribute and set to state.\n        const attr: any = script.getAttribute(\"data-status\");\n        setStatus(attr);\n      }\n\n      // Script event handler to update status in state\n      // Note: Even if the script already exists we still need to add\n      // event handlers to update the state for *this* hook instance.\n      const setStateFromEvent = (event) => {\n        setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n      };\n\n      // Add event listeners\n      script.addEventListener(\"load\", setStateFromEvent);\n      script.addEventListener(\"error\", setStateFromEvent);\n\n      // Remove event listeners on cleanup\n      return () => {\n        if (script) {\n          script.removeEventListener(\"load\", setStateFromEvent);\n          script.removeEventListener(\"error\", setStateFromEvent);\n        }\n      };\n    },\n    [src] // Only re-run effect if script src changes\n  );\n\n  return status;\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/hooks/useShows.ts",["104","105"],"import dayjs from \"dayjs\";\nimport useSWR from \"swr\";\nimport { getAllShows } from \"../lib/api\";\n\nasync function getShows(_: any, preview: boolean) {\n  const today = dayjs();\n\n  const shows = await getAllShows(preview);\n\n  const upcoming = shows.filter(\n    (show) => dayjs(show.date).isAfter(today) && show.isFeatured\n  );\n\n  const past = shows.filter((show) => dayjs(show.date).isBefore(today));\n\n  return {\n    upcoming,\n    past,\n  };\n}\n\nexport default function useShows(preview = false) {\n  return useSWR([\"AllShows\", preview], getShows, {\n    refreshWhenOffline: false,\n    refreshWhenHidden: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n  });\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/api.ts",["106","107","108"],"import type { Document } from \"@contentful/rich-text-types\";\nimport dayjs from \"dayjs\";\nimport type {\n  ArticleInterface,\n  ArtistInterface,\n  CoverImage,\n  GenreInterface,\n  ShowInterface,\n} from \"../types/shared\";\nimport {\n  extractCollection,\n  extractCollectionItem,\n  extractPage,\n  sort,\n} from \"../util\";\nimport { ENDPOINT } from \"./constants\";\n\nexport async function contentful(query: string, preview = false) {\n  return fetch(ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${\n        preview\n          ? process.env.NEXT_PUBLIC_CONTENTFUL_PREVIEW_ACCESS_TOKEN\n          : process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n      }`,\n    },\n    body: JSON.stringify({ query }),\n  }).then((response) => response.json());\n}\n\nexport interface AboutPageData {\n  coverImage: CoverImage;\n  content: { json: Document };\n}\n\nexport async function getAboutPage(preview: boolean): Promise<AboutPageData> {\n  const data = await contentful(\n    /* GraphQL */ `\n    query {\n      pageAbout(id: \"z1SsoA1K4SMJryGuYjzhK\", preview: ${preview}) {\n        coverImage {\n          title\n          description\n          url\n          width\n          height\n        }\n        content {\n          json\n        }\n      }\n    }\n  `,\n    preview\n  );\n\n  return extractPage(data, \"pageAbout\");\n}\n\nexport interface SupportPageData {\n  coverImage: CoverImage;\n  content: { json: Document };\n}\n\nexport async function getSupportPage(\n  preview: boolean\n): Promise<SupportPageData> {\n  const data = await contentful(\n    /* GraphQL */ `\n    query {\n      pageSupport(id: \"Aa4GRMf6fuDtkH0UhkX19\", preview: ${preview}) {\n        coverImage {\n          title\n          description\n          url\n          width\n          height\n        }\n        content {\n          json\n        }\n      }\n    }\n  `,\n    preview\n  );\n\n  return extractPage(data, \"pageSupport\");\n}\n\nexport interface NewsletterPageData {\n  coverImage: CoverImage;\n  content: { json: Document };\n}\n\nexport async function getNewsletterPage(\n  preview: boolean\n): Promise<NewsletterPageData> {\n  const data = await contentful(\n    /* GraphQL */ `\n    query {\n      pageNewsletter(id: \"7t2jOQoBCZ6sGK4HgBZZ42\", preview: ${preview}) {\n        coverImage {\n          title\n          description\n          url\n          width\n          height\n        }\n        content {\n          json\n        }\n      }\n    }\n  `,\n    preview\n  );\n\n  return extractPage(data, \"pageNewsletter\");\n}\n\nexport interface TodaySection {\n  header: string;\n  content: { json: Document };\n}\n\nexport async function getTodaySection(preview: boolean): Promise<TodaySection> {\n  const data = await contentful(/* GraphQL */ `\n    {\n      sectionToday(id: \"2bP8MlTMBYfe1paaxwwziy\", preview: ${preview}) {\n        header\n        content {\n          json\n        }\n      }\n    }\n  `);\n\n  return extractPage(data, \"sectionToday\");\n}\n\nexport async function getAllArtists(\n  preview: boolean\n): Promise<ArtistInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        artistCollection(order: name_ASC, preview: ${preview}, limit: 50) {\n          items {\n            name\n            slug\n            isResident: role\n            photo {\n              title\n              description\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return extractCollection(data, \"artistCollection\");\n}\n\nexport async function getArtistAndMoreShows(\n  slug: string,\n  preview: boolean\n): Promise<{\n  artist: ArtistInterface;\n  relatedShows: ShowInterface[];\n}> {\n  const today = dayjs();\n\n  const entry = await contentful(/* GraphQL */ `\n    query {\n      artistCollection(where: { slug: \"${slug}\" }, limit: 1, preview: ${preview}) {\n        items {\n          name\n          slug\n          photo {\n            title\n            description\n            url\n            width\n            height\n          }\n        }\n      }\n    }\n  `);\n\n  const allShows = await getAllShows(preview);\n\n  const relatedShows = allShows.filter((show) => {\n    const isRelatedArtistFilter =\n      show.artistsCollection.items.filter((artist) => artist.slug === slug)\n        .length > 0;\n\n    const isPastFilter = dayjs(show.date).isBefore(today);\n\n    return isRelatedArtistFilter && isPastFilter;\n  });\n\n  return {\n    artist: extractCollectionItem(entry, \"artistCollection\"),\n    relatedShows,\n  };\n}\n\nexport async function getAllShows(preview: boolean): Promise<ShowInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        showCollection(order: date_DESC, preview: ${preview}, limit: 50) {\n          items {\n            title\n            date\n            slug\n            mixcloudLink\n            isFeatured\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            artistsCollection(limit: 9) {\n              items {\n                name\n                slug\n              }\n            }\n            genresCollection(limit: 9) {\n              items {\n                name\n              }\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return extractCollection(data, \"showCollection\");\n}\n\nexport async function getUpcomingAndPastShows(preview: boolean) {\n  const today = dayjs();\n\n  const shows = await getAllShows(preview);\n\n  /**\n   * Upcoming & Featured\n   */\n  const upcoming = shows\n    .sort((a, b) => (dayjs(a.date).isBefore(b.date) ? -1 : 1))\n    .filter((show) => dayjs(show.date).isAfter(today) && show.isFeatured);\n\n  /**\n   * All Past Shows\n   */\n  const past = shows\n    .sort((a, b) => (dayjs(a.date).isBefore(b.date) ? -1 : 1))\n    .filter((show) => dayjs(show.date).isBefore(today));\n\n  return {\n    upcoming,\n    past,\n  };\n}\n\nexport async function getGenres(preview: boolean) {\n  const { past } = await getUpcomingAndPastShows(preview);\n\n  const allShowGenres = past\n    .flatMap((show) => show.genresCollection.items)\n    .map((genre) => genre.name);\n\n  const uniqueGenres = Array.from(new Set(allShowGenres)).sort(sort.alpha);\n\n  return uniqueGenres;\n}\n\nexport async function getFeaturedShows(\n  preview: boolean\n): Promise<ShowInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        showCollection(\n          order: date_DESC\n          where: { isFeatured: true }\n          limit: 15,\n          preview: ${preview}\n        ) {\n          items {\n            title\n            date\n            slug\n            mixcloudLink\n            isFeatured\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            artistsCollection(limit: 9) {\n              items {\n                name\n                slug\n              }\n            }\n            genresCollection(limit: 9) {\n              items {\n                name\n              }\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  const featuredShows = extractCollection(data, \"showCollection\");\n\n  const pastFeaturedShows = featuredShows.filter((show) =>\n    dayjs(show.date).isBefore(dayjs())\n  );\n\n  return pastFeaturedShows;\n}\n\nexport async function getShowAndMoreShows(\n  slug: string,\n  preview: boolean\n): Promise<{ show: ShowInterface }> {\n  const entry = await contentful(\n    /* GraphQL */ `\n      query {\n        showCollection(\n          where: { slug: \"${slug}\" }\n          order: date_DESC\n          preview: ${preview}\n          limit: 1\n        ) {\n          items {\n            title\n            date\n            slug\n            mixcloudLink\n            isFeatured\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            artistsCollection(limit: 9) {\n              items {\n                name\n                slug\n              }\n            }\n            genresCollection(limit: 9) {\n              items {\n                name\n              }\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return {\n    show: extractCollectionItem(entry, \"showCollection\"),\n  };\n}\n\nexport async function getAllGenres(\n  preview: boolean\n): Promise<GenreInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        genreCollection(order: name_ASC, preview: ${preview}) {\n          items {\n            name\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return extractCollection(data, \"genreCollection\");\n}\n\nexport async function getAllArticles(\n  preview: boolean\n): Promise<ArticleInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        articleCollection(order: date_DESC, preview: ${preview}) {\n          items {\n            title\n            subtitle\n            articleType\n            date\n            slug\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return extractCollection(data, \"articleCollection\");\n}\n\nexport async function getLatestArticles(\n  preview: boolean\n): Promise<ArticleInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        articleCollection(\n          order: date_DESC\n          where: { isFeatured: false }\n          limit: 3\n          preview: ${preview}\n        ) {\n          items {\n            title\n            subtitle\n            articleType\n            date\n            slug\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return extractCollection(data, \"articleCollection\");\n}\n\nexport async function getFeaturedArticles(\n  preview: boolean\n): Promise<ArticleInterface[]> {\n  const data = await contentful(\n    /* GraphQL */ `\n      query {\n        articleCollection(\n          where: { isFeatured: true }\n          order: date_DESC\n          limit: 3\n          preview: ${preview}\n        ) {\n          items {\n            title\n            subtitle\n            articleType\n            date\n            slug\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return extractCollection(data, \"articleCollection\");\n}\n\nexport async function getArticleAndMoreArticles(\n  slug: string,\n  preview: boolean\n): Promise<{ article: ArticleInterface }> {\n  const entry = await contentful(\n    /* GraphQL */ `\n      query {\n        articleCollection(\n          limit: 1\n          where: { slug: \"${slug}\" }\n          order: date_DESC\n          preview: ${preview}\n        ) {\n          items {\n            title\n            subtitle\n            articleType\n            date\n            slug\n            coverImage {\n              title\n              description\n              url\n              width\n              height\n            }\n            content {\n              json\n            }\n          }\n        }\n      }\n    `,\n    preview\n  );\n\n  return {\n    article: extractCollectionItem(entry, \"articleCollection\"),\n  };\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/constants.ts",[],"/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/mailchimp.ts",[],"/Users/jeff/GitHub/mirshko/refuge-worldwide/lib/mixcloud.ts",[],"/Users/jeff/GitHub/mirshko/refuge-worldwide/next-env.d.ts",[],"/Users/jeff/GitHub/mirshko/refuge-worldwide/pages/api/exit-preview.ts",["109"],"import type { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default async function exit(req: NextApiRequest, res: NextApiResponse) {\n  // Exit the current user from \"Preview Mode\". This function accepts no args.\n  res.clearPreviewData();\n\n  // Redirect the user back to the index page.\n  res.writeHead(307, { Location: \"/\" });\n\n  res.end();\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/pages/api/preview.ts",["110"],"import type { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default async function preview(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { secret, slug } = req.query;\n\n  if (secret !== process.env.CONTENTFUL_PREVIEW_SECRET || !slug) {\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n\n  // If the slug doesn't exist prevent preview mode from being enabled\n\n  // Enable Preview Mode by setting the cookies\n  res.setPreviewData({});\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  // res.writeHead(307, { Location: `/posts/${post.slug}` })\n\n  res.end();\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/types/shared.d.ts",["111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"import type { Document } from \"@contentful/rich-text-types\";\n\nexport interface CoverImage {\n  title: string;\n  description: string;\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport interface ArtistInterface {\n  name: string;\n  slug: string;\n  photo: CoverImage;\n  isResident: boolean;\n}\n\nexport type ArtistFilterType = \"All\" | \"Residents\" | \"Guests\";\n\nexport interface GenreInterface {\n  name: string;\n}\n\nexport interface ShowInterface {\n  mixcloudLink: string;\n  title: string;\n  date: string;\n  slug: string;\n  coverImage: CoverImage;\n  isFeatured: boolean;\n  artistsCollection: {\n    items: ArtistInterface[];\n  };\n  genresCollection: {\n    items: GenreInterface[];\n  };\n  content: {\n    json: Document;\n  };\n}\n\nexport enum ArticleType {\n  Project = \"Project\",\n  Blog = \"Blog\",\n  News = \"News\",\n  Event = \"Event\",\n  Interview = \"Interview\",\n}\n\nexport interface ArticleInterface {\n  title: string;\n  subtitle: string;\n  articleType: ArticleType;\n  date: string;\n  slug: string;\n  location: string;\n  coverImage: CoverImage;\n  content: {\n    json: Document;\n  };\n}\n\nexport interface RadioCoInterface {\n  status: \"online\" | \"offline\";\n  source: {\n    type: string;\n    collaborator?: any;\n    relay?: any;\n  };\n  collaborators: any[];\n  relays: any[];\n  current_track: {\n    title: string;\n    start_time: string;\n    artwork_url: string;\n    artwork_url_large: string;\n  };\n  history: { title: string }[];\n  logo_url: string;\n  streaming_hostname: string;\n  outputs: {\n    name: string;\n    format: string;\n    bitrate: number;\n  }[];\n}\n\nexport interface PlayerWidget {\n  events: {\n    buffering: {\n      on: (e: any) => void;\n      off: (e: any) => void;\n    };\n    ended: {\n      on: (e: any) => void;\n      off: (e: any) => void;\n    };\n    error: {\n      on: (e: any) => void;\n      off: (e: any) => void;\n    };\n    pause: {\n      on: (e: any) => void;\n      off: (e: any) => void;\n    };\n    play: {\n      on: (e: any) => void;\n      off: (e: any) => void;\n    };\n    progress: {\n      on: (e: any) => void;\n      off: (e: any) => void;\n    };\n  };\n  getCurrentKey: () => Promise<string>;\n  getDuration: () => Promise<number>;\n  getIsPaused: () => Promise<boolean>;\n  getPosition: () => Promise<number>;\n  getVolume: () => Promise<number>;\n  pause: () => Promise<void>;\n  play: () => Promise<void>;\n  seek: (seconds: number) => Promise<void>;\n  togglePlay: () => Promise<void>;\n  ready: Promise<void>;\n}\n","/Users/jeff/GitHub/mirshko/refuge-worldwide/util.ts",["127","128","129","130","131","132","133","134"],{"ruleId":"135","severity":1,"message":"136","line":3,"column":16,"nodeType":"137","messageId":"138","endLine":3,"endColumn":71},{"ruleId":"139","severity":1,"message":"140","line":3,"column":49,"nodeType":"141","messageId":"142","endLine":3,"endColumn":52,"suggestions":"143"},{"ruleId":"139","severity":1,"message":"140","line":4,"column":30,"nodeType":"141","messageId":"142","endLine":4,"endColumn":33,"suggestions":"144"},{"ruleId":"135","severity":1,"message":"136","line":14,"column":16,"nodeType":"137","messageId":"138","endLine":17,"endColumn":2},{"ruleId":"135","severity":1,"message":"136","line":3,"column":16,"nodeType":"137","messageId":"138","endLine":3,"endColumn":41},{"ruleId":"139","severity":1,"message":"140","line":7,"column":6,"nodeType":"141","messageId":"142","endLine":7,"endColumn":9,"suggestions":"145"},{"ruleId":"135","severity":1,"message":"136","line":22,"column":16,"nodeType":"137","messageId":"138","endLine":22,"endColumn":51},{"ruleId":"135","severity":1,"message":"136","line":3,"column":16,"nodeType":"137","messageId":"138","endLine":11,"endColumn":3},{"ruleId":"135","severity":1,"message":"136","line":4,"column":16,"nodeType":"137","messageId":"138","endLine":6,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":4,"column":36,"nodeType":"141","messageId":"142","endLine":4,"endColumn":39,"suggestions":"146"},{"ruleId":"135","severity":1,"message":"136","line":12,"column":16,"nodeType":"137","messageId":"138","endLine":12,"endColumn":60},{"ruleId":"135","severity":1,"message":"136","line":3,"column":16,"nodeType":"137","messageId":"138","endLine":3,"endColumn":47},{"ruleId":"139","severity":1,"message":"140","line":47,"column":21,"nodeType":"141","messageId":"142","endLine":47,"endColumn":24,"suggestions":"147"},{"ruleId":"139","severity":1,"message":"140","line":5,"column":28,"nodeType":"141","messageId":"142","endLine":5,"endColumn":31,"suggestions":"148"},{"ruleId":"135","severity":1,"message":"136","line":22,"column":16,"nodeType":"137","messageId":"138","endLine":22,"endColumn":50},{"ruleId":"135","severity":1,"message":"136","line":18,"column":8,"nodeType":"137","messageId":"138","endLine":18,"endColumn":65},{"ruleId":"135","severity":1,"message":"136","line":259,"column":8,"nodeType":"137","messageId":"138","endLine":259,"endColumn":64},{"ruleId":"135","severity":1,"message":"136","line":284,"column":8,"nodeType":"137","messageId":"138","endLine":284,"endColumn":50},{"ruleId":"135","severity":1,"message":"136","line":3,"column":16,"nodeType":"137","messageId":"138","endLine":3,"endColumn":78},{"ruleId":"135","severity":1,"message":"136","line":3,"column":16,"nodeType":"137","messageId":"138","endLine":6,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":67,"column":20,"nodeType":"141","messageId":"142","endLine":67,"endColumn":23,"suggestions":"149"},{"ruleId":"139","severity":1,"message":"140","line":68,"column":13,"nodeType":"141","messageId":"142","endLine":68,"endColumn":16,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"140","line":70,"column":18,"nodeType":"141","messageId":"142","endLine":70,"endColumn":21,"suggestions":"151"},{"ruleId":"139","severity":1,"message":"140","line":71,"column":11,"nodeType":"141","messageId":"142","endLine":71,"endColumn":14,"suggestions":"152"},{"ruleId":"139","severity":1,"message":"140","line":91,"column":15,"nodeType":"141","messageId":"142","endLine":91,"endColumn":18,"suggestions":"153"},{"ruleId":"139","severity":1,"message":"140","line":92,"column":16,"nodeType":"141","messageId":"142","endLine":92,"endColumn":19,"suggestions":"154"},{"ruleId":"139","severity":1,"message":"140","line":95,"column":15,"nodeType":"141","messageId":"142","endLine":95,"endColumn":18,"suggestions":"155"},{"ruleId":"139","severity":1,"message":"140","line":96,"column":16,"nodeType":"141","messageId":"142","endLine":96,"endColumn":19,"suggestions":"156"},{"ruleId":"139","severity":1,"message":"140","line":99,"column":15,"nodeType":"141","messageId":"142","endLine":99,"endColumn":18,"suggestions":"157"},{"ruleId":"139","severity":1,"message":"140","line":100,"column":16,"nodeType":"141","messageId":"142","endLine":100,"endColumn":19,"suggestions":"158"},{"ruleId":"139","severity":1,"message":"140","line":103,"column":15,"nodeType":"141","messageId":"142","endLine":103,"endColumn":18,"suggestions":"159"},{"ruleId":"139","severity":1,"message":"140","line":104,"column":16,"nodeType":"141","messageId":"142","endLine":104,"endColumn":19,"suggestions":"160"},{"ruleId":"139","severity":1,"message":"140","line":107,"column":15,"nodeType":"141","messageId":"142","endLine":107,"endColumn":18,"suggestions":"161"},{"ruleId":"139","severity":1,"message":"140","line":108,"column":16,"nodeType":"141","messageId":"142","endLine":108,"endColumn":19,"suggestions":"162"},{"ruleId":"139","severity":1,"message":"140","line":111,"column":15,"nodeType":"141","messageId":"142","endLine":111,"endColumn":18,"suggestions":"163"},{"ruleId":"139","severity":1,"message":"140","line":112,"column":16,"nodeType":"141","messageId":"142","endLine":112,"endColumn":19,"suggestions":"164"},{"ruleId":"139","severity":1,"message":"140","line":5,"column":20,"nodeType":"141","messageId":"142","endLine":5,"endColumn":23,"suggestions":"165"},{"ruleId":"135","severity":1,"message":"136","line":9,"column":28,"nodeType":"166","messageId":"138","endLine":9,"endColumn":73},{"ruleId":"139","severity":1,"message":"140","line":15,"column":14,"nodeType":"141","messageId":"142","endLine":15,"endColumn":17,"suggestions":"167"},{"ruleId":"135","severity":1,"message":"136","line":20,"column":34,"nodeType":"166","messageId":"138","endLine":23,"endColumn":5},{"ruleId":"135","severity":1,"message":"136","line":25,"column":38,"nodeType":"166","messageId":"138","endLine":28,"endColumn":5},{"ruleId":"135","severity":1,"message":"136","line":69,"column":34,"nodeType":"166","messageId":"138","endLine":69,"endColumn":62},{"ruleId":"135","severity":1,"message":"136","line":87,"column":31,"nodeType":"166","messageId":"138","endLine":87,"endColumn":47},{"ruleId":"135","severity":1,"message":"136","line":96,"column":10,"nodeType":"166","messageId":"138","endLine":96,"endColumn":35},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["168","169"],["170","171"],["172","173"],["174","175"],["176","177"],["178","179"],["180","181"],["182","183"],["184","185"],["186","187"],["188","189"],["190","191"],["192","193"],["194","195"],["196","197"],["198","199"],["200","201"],["202","203"],["204","205"],["206","207"],["208","209"],["210","211"],["212","213"],"ArrowFunctionExpression",["214","215"],{"messageId":"216","fix":"217","desc":"218"},{"messageId":"219","fix":"220","desc":"221"},{"messageId":"216","fix":"222","desc":"218"},{"messageId":"219","fix":"223","desc":"221"},{"messageId":"216","fix":"224","desc":"218"},{"messageId":"219","fix":"225","desc":"221"},{"messageId":"216","fix":"226","desc":"218"},{"messageId":"219","fix":"227","desc":"221"},{"messageId":"216","fix":"228","desc":"218"},{"messageId":"219","fix":"229","desc":"221"},{"messageId":"216","fix":"230","desc":"218"},{"messageId":"219","fix":"231","desc":"221"},{"messageId":"216","fix":"232","desc":"218"},{"messageId":"219","fix":"233","desc":"221"},{"messageId":"216","fix":"234","desc":"218"},{"messageId":"219","fix":"235","desc":"221"},{"messageId":"216","fix":"236","desc":"218"},{"messageId":"219","fix":"237","desc":"221"},{"messageId":"216","fix":"238","desc":"218"},{"messageId":"219","fix":"239","desc":"221"},{"messageId":"216","fix":"240","desc":"218"},{"messageId":"219","fix":"241","desc":"221"},{"messageId":"216","fix":"242","desc":"218"},{"messageId":"219","fix":"243","desc":"221"},{"messageId":"216","fix":"244","desc":"218"},{"messageId":"219","fix":"245","desc":"221"},{"messageId":"216","fix":"246","desc":"218"},{"messageId":"219","fix":"247","desc":"221"},{"messageId":"216","fix":"248","desc":"218"},{"messageId":"219","fix":"249","desc":"221"},{"messageId":"216","fix":"250","desc":"218"},{"messageId":"219","fix":"251","desc":"221"},{"messageId":"216","fix":"252","desc":"218"},{"messageId":"219","fix":"253","desc":"221"},{"messageId":"216","fix":"254","desc":"218"},{"messageId":"219","fix":"255","desc":"221"},{"messageId":"216","fix":"256","desc":"218"},{"messageId":"219","fix":"257","desc":"221"},{"messageId":"216","fix":"258","desc":"218"},{"messageId":"219","fix":"259","desc":"221"},{"messageId":"216","fix":"260","desc":"218"},{"messageId":"219","fix":"261","desc":"221"},{"messageId":"216","fix":"262","desc":"218"},{"messageId":"219","fix":"263","desc":"221"},{"messageId":"216","fix":"264","desc":"218"},{"messageId":"219","fix":"265","desc":"221"},{"messageId":"216","fix":"266","desc":"218"},{"messageId":"219","fix":"267","desc":"221"},"suggestUnknown",{"range":"268","text":"269"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"268","text":"270"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"271","text":"269"},{"range":"271","text":"270"},{"range":"272","text":"269"},{"range":"272","text":"270"},{"range":"273","text":"269"},{"range":"273","text":"270"},{"range":"274","text":"269"},{"range":"274","text":"270"},{"range":"275","text":"269"},{"range":"275","text":"270"},{"range":"276","text":"269"},{"range":"276","text":"270"},{"range":"277","text":"269"},{"range":"277","text":"270"},{"range":"278","text":"269"},{"range":"278","text":"270"},{"range":"279","text":"269"},{"range":"279","text":"270"},{"range":"280","text":"269"},{"range":"280","text":"270"},{"range":"281","text":"269"},{"range":"281","text":"270"},{"range":"282","text":"269"},{"range":"282","text":"270"},{"range":"283","text":"269"},{"range":"283","text":"270"},{"range":"284","text":"269"},{"range":"284","text":"270"},{"range":"285","text":"269"},{"range":"285","text":"270"},{"range":"286","text":"269"},{"range":"286","text":"270"},{"range":"287","text":"269"},{"range":"287","text":"270"},{"range":"288","text":"269"},{"range":"288","text":"270"},{"range":"289","text":"269"},{"range":"289","text":"270"},{"range":"290","text":"269"},{"range":"290","text":"270"},{"range":"291","text":"269"},{"range":"291","text":"270"},{"range":"292","text":"269"},{"range":"292","text":"270"},{"range":"293","text":"269"},{"range":"293","text":"270"},[83,86],"unknown","never",[105,108],[174,177],[114,117],[1565,1568],[123,126],[1195,1198],[1212,1215],[1239,1242],[1256,1259],[1625,1628],[1654,1657],[1702,1705],[1731,1734],[1779,1782],[1808,1811],[1856,1859],[1885,1888],[1932,1935],[1961,1964],[2012,2015],[2041,2044],[123,126],[315,318]]